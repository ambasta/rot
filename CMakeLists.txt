CMAKE_MINIMUM_REQUIRED(VERSION 3.13)
set(CMAKE_CXX_STANDARD 20)

PROJECT(rot)

# Verbose make
SET(CMAKE_VERBOSE_MAKEFILE ON)

# Disabled shared build
OPTION(BUILD_SHARED_LIBS "Request building of executable with shared libraries" ON)

SET(INCLUDE_DIRS "")
LIST(APPEND INCLUDE_DIRS "third_party/concurrentqueue")
LIST(APPEND INCLUDE_DIRS "third_party/Configuru")
SET(LIBRARY_DIRS "")

FIND_PACKAGE(Threads)
LIST(APPEND LIBRARY_DIRS ${CMAKE_THREAD_LIBS_INIT})

FIND_PACKAGE(CURL)
LIST(APPEND INCLUDE_DIRS ${CURL_INCLUDE_DIRS})
LIST(APPEND LIBRARY_DIRS ${CURL_LIBRARIES})

IF(BUILD_SHARED_LIBS)
    MESSAGE("Shared libs set to ON")
    FIND_PACKAGE(AWSSDK REQUIRED COMPONENTS firehose)
    FIND_PACKAGE(libmongocxx REQUIRED)

    LIST(APPEND INCLUDE_DIRS ${LIBMONGOCXX_INCLUDE_DIRS})
    LIST(APPEND INCLUDE_DIRS ${AWSSDK_INCLUDE_DIRS})

    LIST(APPEND LIBRARY_DIRS ${LIBMONGOCXX_LIBRARIES})
    LIST(APPEND LIBRARY_DIRS ${AWSSDK_LINK_LIBRARIES})
ELSE()
    FIND_PACKAGE(libmongocxx-static)
    FIND_PACKAGE(AWSSDK-static)

    ADD_LIBRARY(AWSSDK STATIC IMPORTED)
    ADD_LIBRARY(libmongocxx STATIC IMPORTED)

    LIST(APPEND INCLUDE_DIRS ${ASKSDK_STATIC_INCLUDE_DIRS})
    LIST(APPEND INCLUDE_DIRS ${LIBMONGOCXX_STATIC_INCLUDE_DIRS})

#    LIST(APPEND LIBRARY_DIRS AWSSDK)
#    LIST(APPEND LIBRARY )
#
#    SET(INCLUDE_DIRS ${LIBMONGOCXX_STATIC_INCLUDE_DIRS})
#    SET(LINK_LIBS ${LIBMONGOCXX_STATIC_LIBRARIES})
ENDIF()

ADD_EXECUTABLE(
        ${PROJECT_NAME}
            main.cxx
        producer.cxx
        consumer.cxx globals.hxx producer.hxx)

TARGET_INCLUDE_DIRECTORIES(
        ${PROJECT_NAME}
            PUBLIC
            ${INCLUDE_DIRS})

TARGET_LINK_LIBRARIES(
        ${PROJECT_NAME}
            ${LIBRARY_DIRS})


